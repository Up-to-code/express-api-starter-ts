// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(user)
  sessions      Session[]
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  user
  admin
  editor
}

model Client {
  id          String     @id @default(cuid())
  name        String
  phone       String     @unique
  lastActive  DateTime   @default(now())
  lastMessage String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  messages    Message[]
  type        String     @default("Client")
  campaigns   Campaign[] @relation("CampaignToClient")
}

model Message {
  id        String   @id @default(cuid())
  text      String
  clientId  String
  isBot     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])
}

model QAPair {
  id       String @id @default(cuid())
  question String
  answer   String
  category String
}

// Define the Campaign model based on your initialCampaigns data structure
model Campaign {
  id        String    @id @default(cuid())
  name      String
  type      String    // "Template" or "Custom"
  status    String    // "Active", "Scheduled", "Completed", "Draft"
  audience  String
  sentCount Int       @default(0)
  message   String?
  clients   Client[]  @relation("CampaignToClient")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSentAt DateTime?
}

// Define the Template model for WhatsApp templates
model Template {
  id        String   @id @default(cuid())
  name      String
  content   String
  category  String   // "greeting", "reminder", "update", "payment", "marketing", "custom"
  variables String[] // Array of variable names used in the template
  language  String   @default("en") // Language code: "en", "ar", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite index for name and language to ensure uniqueness per language
  @@unique([name, language])
}
